using System;
using System.Collections.Generic;
using System.Drawing;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;

namespace TDM_IP_Tracker
{
    public partial class PingVulnerabilityScannerForm : Form
    {
        // List of common ports & their service names
        private readonly Dictionary<int, string> commonPorts = new Dictionary<int, string>
        {
            {21, "FTP"},
            {22, "SSH"},
            {23, "Telnet"},
            {25, "SMTP"},
            {53, "DNS"},
            {80, "HTTP"},
            {110, "POP3"},
            {143, "IMAP"},
            {443, "HTTPS"},
            {445, "SMB"},
            {3389, "RDP"}
        };

        public PingVulnerabilityScannerForm()
        {
            InitializeComponent();
            InitializeDataGrid();
        }

        private void InitializeDataGrid()
        {
            dgvResults.Columns.Add("Port", "Port");
            dgvResults.Columns.Add("Service", "Service");
            dgvResults.Columns.Add("Status", "Status");
            dgvResults.Columns.Add("Risk", "Risk Level");
            dgvResults.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }

        private async void btnScan_Click(object sender, EventArgs e)
        {
            string target = txtTargetIP.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid IP address or hostname.", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            btnScan.Enabled = false;
            dgvResults.Rows.Clear();
            lblStatus.Text = $"Status: Scanning {target}...";
            progressBarScan.Value = 0;
            progressBarScan.Maximum = commonPorts.Count;

            // Scan predefined ports
            foreach (var port in commonPorts.Keys)
            {
                bool isOpen = await IsPortOpenAsync(target, port, 1000);
                string riskLevel = GetRiskLevel(port, isOpen);
                string statusText = isOpen ? "Open" : "Closed";

                int rowIndex = dgvResults.Rows.Add(port, commonPorts[port], statusText, riskLevel);

                // Color rows based on risk
                var row = dgvResults.Rows[rowIndex];
                if (riskLevel == "High")
                {
                    row.DefaultCellStyle.BackColor = Color.LightCoral;
                }
                else if (riskLevel == "Medium")
                {
                    row.DefaultCellStyle.BackColor = Color.Khaki;
                }
                else
                {
                    row.DefaultCellStyle.BackColor = Color.LightGreen;
                }

                progressBarScan.Value += 1;
            }

            // Additional checks
            await CheckSSL_TLS(target);
            await CheckDNS(target);
            await PingHost(target);

            lblStatus.Text = "Status: Scan complete.";
            btnScan.Enabled = true;
        }

        // Async method to check if port is open
        private async Task<bool> IsPortOpenAsync(string host, int port, int timeout)
        {
            try
            {
                using (var client = new TcpClient())
                {
                    var task = client.ConnectAsync(host, port);
                    if (await Task.WhenAny(task, Task.Delay(timeout)) == task)
                    {
                        return client.Connected;
                    }
                    else
                    {
                        return false; // Timeout
                    }
                }
            }
            catch
            {
                return false;
            }
        }

        // SSL/TLS vulnerability check on HTTPS port (443)
        private async Task CheckSSL_TLS(string host)
        {
            try
            {
                if (await IsPortOpenAsync(host, 443, 1000))
                {
                    var sslCheckResult = CheckSSL(host);
                    dgvResults.Rows.Add(443, "HTTPS", "Open", sslCheckResult);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error during SSL/TLS check: " + ex.Message);
            }
        }

        private string CheckSSL(string host)
        {
            try
            {
                var sslClient = new TcpClient(host, 443);
                var sslStream = new SslStream(sslClient.GetStream(), false,
                    new RemoteCertificateValidationCallback((sender, cert, chain, sslPolicyErrors) => true));
                sslStream.AuthenticateAsClient(host);

                var certificate = sslStream.RemoteCertificate as X509Certificate2;
                if (certificate != null)
                {
                    // Check for weak ciphers and protocols
                    if (certificate.GetEffectiveDateString().CompareTo("2025-01-01") < 0) // Example of expired certificate
                        return "High - Weak SSL/TLS";

                    return "Low - SSL/TLS Strong";
                }
                else
                {
                    return "Medium - SSL/TLS Check Failed";
                }
            }
            catch
            {
                return "High - SSL/TLS Connection Failed";
            }
        }

        // DNS Misconfiguration Check
        private async Task CheckDNS(string target)
        {
            try
            {
                IPHostEntry hostEntry = await Dns.GetHostEntryAsync(target);
                dgvResults.Rows.Add(53, "DNS", "Configured", "Low");
            }
            catch
            {
                dgvResults.Rows.Add(53, "DNS", "Misconfigured", "High");
            }
        }

        // Check if the host is alive (ICMP Ping)
        private async Task PingHost(string target)
        {
            try
            {
                var ping = new System.Net.NetworkInformation.Ping();
                var reply = await ping.SendPingAsync(target, 1000);
                string pingStatus = reply.Status == System.Net.NetworkInformation.IPStatus.Success ? "Alive" : "Unreachable";
                dgvResults.Rows.Add(0, "ICMP Ping", pingStatus, "None");
            }
            catch
            {
                dgvResults.Rows.Add(0, "ICMP Ping", "Error", "High");
            }
        }

        // Assign risk level based on port and if open
        private string GetRiskLevel(int port, bool isOpen)
        {
            if (!isOpen)
                return "None";

            // Some simple heuristics:
            switch (port)
            {
                case 21:  // FTP usually unsafe if open and anonymous login enabled
                case 23:  // Telnet is insecure
                case 445: // SMB can be risky
                case 3389: // RDP - remote desktop risk
                    return "High";

                case 22:  // SSH is usually secure but can be medium risk if weak credentials
                case 25:  // SMTP can be abused
                    return "Medium";

                case 80:  // HTTP
                case 443: // HTTPS
                case 53:  // DNS
                case 110: // POP3
                case 143: // IMAP
                    return "Low";

                default:
                    return "Unknown";
            }
        }
    }
}
